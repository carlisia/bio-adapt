# https://taskfile.dev

version: "3"

vars:
  GO_FLAGS: -v
  LDFLAGS: -s -w

tasks:
  # Default task - shows available tasks
  default:
    desc: Show available tasks
    cmds:
      - task --list

  # Build everything
  build:
    desc: Build all simulations
    cmds:
      - task: build:simulations

  # Build simulation binaries
  build:simulations:
    desc: Build all simulation binaries
    cmds:
      - |
        echo "Building simulations..."
        # Build emerge simulation
        if [ -f "simulations/emerge/main.go" ]; then
          echo "  - Building emerge simulation"
          mkdir -p simulations/emerge/bin
          go build {{.GO_FLAGS}} -ldflags="{{.LDFLAGS}}" -o simulations/emerge/bin/emerge ./simulations/emerge
        fi
        # Look for other simulations (future-proofing)
        for dir in simulations/*/; do
          if [ -f "$dir/main.go" ] && [ "$(basename $dir)" != "emerge" ]; then
            name=$(basename "$dir")
            echo "  - Building $name simulation"
            mkdir -p "$dir/bin"
            go build {{.GO_FLAGS}} -ldflags="{{.LDFLAGS}}" -o "$dir/bin/$name" "./$dir"
          fi
        done
    sources:
      - simulations/**/*.go
      - emerge/**/*.go
      - go.mod
      - go.sum
    generates:
      - "simulations/*/bin/*"

  # Alias for backward compatibility
  build:examples:
    desc: Build all simulation binaries (alias for build:simulations)
    cmds:
      - task: build:simulations


  # Run a simulation
  run:sim:
    desc: Run a simulation (use 'task run:sim -- emerge')
    deps: [build:simulations]
    cmds:
      - |
        if [ -z "{{.CLI_ARGS}}" ]; then
          echo "Usage: task run:sim -- emerge"
          echo "   or: task run:sim -- emerge -scale tiny"
          echo "   or: task run:sim -- emerge -list"
        else
          # Extract the first argument as the simulation name
          sim_name=$(echo "{{.CLI_ARGS}}" | cut -d' ' -f1)
          sim_args=$(echo "{{.CLI_ARGS}}" | cut -d' ' -f2-)
          
          if [ "$sim_name" = "emerge" ]; then
            if [ "$sim_args" = "$sim_name" ]; then
              # No additional arguments
              simulations/emerge/bin/emerge
            else
              # Pass additional arguments
              simulations/emerge/bin/emerge $sim_args
            fi
          else
            echo "Unknown simulation: $sim_name"
            echo "Available simulations: emerge"
          fi
        fi

  # List all available binaries
  list:binaries:
    desc: List all built simulation binaries
    cmds:
      - |
        echo "Simulation binaries:"
        if [ -f "simulations/emerge/bin/emerge" ]; then
          echo "  emerge: $(ls -lh simulations/emerge/bin/emerge | awk '{print $5}')"
        fi
        echo ""
        echo "Run with: task run:sim -- emerge"
        echo "   or: task run:sim -- emerge -scale tiny"
        echo "   or: task run:sim -- emerge -list"

  # Run tests
  test:
    desc: Run all tests
    cmds:
      - go test -v -shuffle=on ./...

  # Run tests with coverage
  test:coverage:
    desc: Run tests with coverage report
    cmds:
      - go test -v -shuffle=on -coverprofile=coverage.out ./...
      - go tool cover -html=coverage.out -o coverage.html
      - echo "Coverage report generated at coverage.html"

  # Run tests in short mode
  test:short:
    desc: Run tests in short mode
    cmds:
      - go test -v -short ./...

  # Run simulation tests
  test:sim:
    desc: Run simulation tests
    cmds:
      - go test -v -shuffle=on ./simulations/...

  # Run simulation tests with coverage
  test:sim:coverage:
    desc: Run simulation tests with coverage report
    cmds:
      - go test -v -shuffle=on -coverprofile=coverage-sim.out ./simulations/...
      - go tool cover -html=coverage-sim.out -o coverage-sim.html
      - echo "Simulation coverage report generated at coverage-sim.html"

  # Run simulation tests
  test:sim:
    desc: Run simulation tests
    cmds:
      - go test -v -shuffle=on ./simulations/...

  # Run simulation tests with coverage
  test:sim:coverage:
    desc: Run simulation tests with coverage report
    cmds:
      - go test -v -shuffle=on -coverprofile=coverage-sim.out ./simulations/...
      - go tool cover -html=coverage-sim.out -o coverage-sim.html
      - echo "Simulation coverage report generated at coverage-sim.html"

  # Run E2E tests
  test:e2e:
    desc: Run end-to-end integration tests
    cmds:
      - go test -v -tags=e2e -timeout=5m -count=1 ./e2e

  # Run E2E tests with verbose output
  test:e2e:verbose:
    desc: Run E2E tests with detailed output
    cmds:
      - go test -v -tags=e2e -timeout=10m -run TestE2E ./e2e

  # Run E2E benchmarks
  test:e2e:bench:
    desc: Run E2E performance benchmarks
    cmds:
      - go test -tags=e2e -bench=BenchmarkE2E -benchmem -benchtime=10s ./e2e

  # Run stress tests (long running)
  test:stress:
    desc: Run stress tests with large swarms
    cmds:
      - go test -v -tags=e2e -timeout=30m -run TestE2E.*Scalability ./e2e
      - go test -v -tags=e2e -timeout=30m -run TestE2E.*Resilience ./e2e

  # Run benchmarks
  bench:
    desc: Run all benchmarks
    cmds:
      - go test -bench=. -benchmem ./...

  # Run emerge benchmarks
  bench:emerge:
    desc: Run emerge package benchmarks
    cmds:
      - go test -bench=. -benchmem ./emerge

  # Format code
  fmt:
    desc: Format Go code
    cmds:
      - go fmt ./...

  # Run go vet
  vet:
    desc: Run go vet
    cmds:
      - go vet ./...

  # Run linter (if installed)
  lint:
    desc: Run golangci-lint with all configured linters
    cmds:
      - golangci-lint run ./...
    preconditions:
      - sh: command -v golangci-lint
        msg: "Install golangci-lint from https://golangci-lint.run/usage/install/"

  # Run linters and automatically fix issues where possible
  lint:fix:
    desc: Run linter and apply automatic fixes where possible
    cmds:
      - golangci-lint run --fix ./...
    preconditions:
      - sh: command -v golangci-lint
        msg: "Install golangci-lint from https://golangci-lint.run/usage/install/"

  # Run only fast linters for quick feedback
  lint:fast:
    desc: Run only fast linters for quick checks
    cmds:
      - golangci-lint run --timeout=1m ./...
    preconditions:
      - sh: command -v golangci-lint
        msg: "Install golangci-lint from https://golangci-lint.run/usage/install/"

  # Run specific linter
  lint:intrange:
    desc: Check for loops that could use range over int (Go 1.22+)
    cmds:
      - golangci-lint run --no-config --enable-only intrange ./...
    preconditions:
      - sh: command -v golangci-lint
        msg: "Install golangci-lint from https://golangci-lint.run/usage/install/"

  # Show which linters are enabled
  lint:list:
    desc: List all enabled linters
    cmds:
      - golangci-lint linters
    preconditions:
      - sh: command -v golangci-lint
        msg: "Install golangci-lint from https://golangci-lint.run/usage/install/"

  # Run all checks
  check:
    desc: Run all checks (fmt, vet, lint, vuln)
    cmds:
      - task: fmt
      - task: vet
      - task: lint
      - task: vuln

  # Clean build artifacts
  clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf simulations/*/bin
      - rm -f coverage.out coverage.html
      - go clean -cache
      - go clean -testcache

  # Update dependencies
  deps:
    desc: Download and tidy dependencies
    cmds:
      - go mod download
      - go mod tidy

  # Update dependencies to latest
  deps:update:
    desc: Update all dependencies to latest versions
    cmds:
      - go get -u ./...
      - go mod tidy
      - echo "Consider updating Go tools with 'task tools:install' if needed"

  # Install/update Go development tools
  tools:install:
    desc: Install or update Go development tools
    cmds:
      - go install golang.org/x/vuln/cmd/govulncheck@latest
      - go install golang.org/x/tools/gopls@latest
      - go install golang.org/x/tools/cmd/goimports@latest
      - go install honnef.co/go/tools/cmd/staticcheck@latest
      - echo "âœ… Go tools installed/updated successfully"

  # Check for vulnerabilities
  vuln:
    desc: Check for known vulnerabilities
    cmds:
      - govulncheck ./...
    preconditions:
      - sh: command -v govulncheck
        msg: "Install with: go install golang.org/x/vuln/cmd/govulncheck@latest"



  # Watch and run tests
  watch:test:
    desc: Watch and run tests on file changes (requires entr)
    cmds:
      - find . -name "*.go" | entr -c go test -v ./...
    preconditions:
      - sh: command -v entr
        msg: "Install entr for file watching"
